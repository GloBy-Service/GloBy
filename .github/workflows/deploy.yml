name: Frontend CI/CD

on:
  push:
    branches:
      - prod
      - dev
env:
  REGISTRY: docker.io
  IMAGE_NAME: therzarzayev/globy-frontend:${{ github.ref_name }}-${{ github.run_number }}
  GKE_CLUSTER: globy-cluster
  GKE_ZONE: us-central1-c
  GCP_PROJECT: possible-dream-460619-t4

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: build/

  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}

  deploy:
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Configure gcloud and get GKE credentials
        run: |
          gcloud config set project $GCP_PROJECT
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

      - name: Set ingress host based on branch
        run: |
          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "K8S_INGRESS_HOST=${{ secrets.DEV_INGRESS_HOST }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "prod" ]]; then
            echo "K8S_INGRESS_HOST=${{ secrets.PROD_INGRESS_HOST }}" >> $GITHUB_ENV
          else
            echo "Unsupported branch"; exit 1
          fi

      - name: Deploy to GKE
        run: |
          envsubst < deploy/k8s.yaml > k8s-temp.yaml
          kubectl apply -f k8s-temp.yaml
        env:
          K8S_NAMESPACE: globy-${{ github.ref_name }}
